import { Controller, Get, Query } from '@nestjs/common';
import { PrismaService } from '../services/prisma/prisma.service';

@Controller('projects')
export class ProjectsController {
  constructor(private prisma: PrismaService) {}
  @Get()
  async getProjects(
    @Query('page') page: string,
    @Query('perPage') perPage: string,
    @Query('search') search: string = '',
    @Query('regions') regions: string = '',
    @Query('units_types') units_types: string = '',
    @Query('area_name') name: string = '',
    @Query('status') status: string = '',
    @Query('developer') developer: string = '',
    @Query('priority') priority: string = '',
    @Query('furnishing') furnishing: string = '',
    @Query('min') minrangePrice: string = '',
    @Query('max') maxrangePrice: string = '',
    @Query('year') year: string,
    @Query('quarter') quarter: string,
    @Query('month') month: string,
    @Query('display_all') dispall: string = '',
    @Query('twoBedroom') twoBedroom: string,
    @Query('sixBedroom') sixBedroom: string,
    @Query('oneBedroomPool') oneBedroomPool: string,
    @Query('oneBedroom') oneBedroom: string,
    @Query('fourBedroom') fourBedroom: string,
    @Query('threeBedroom') threeBedroom: string,
    @Query('mergedStudios') mergedStudios: string,
    @Query('twoBedroomPool') twoBedroomPool: string,
    @Query('eightBedroom') eightBedroom: string,
    @Query('nineBedroom') nineBedroom: string,
    @Query('sevenBedroom') sevenBedroom: string,
    @Query('studioPool') studioPool: string,
    @Query('fiveBedroom') fiveBedroom: string,
    @Query('threeBedroomPool') threeBedroomPool: string,
    @Query('twoAndHalfBedroom') twoAndHalfBedroom: string,
    @Query('studio') studio: string,
    @Query('oneAndHalfBedroom') oneAndHalfBedroom: string,
    @Query('threeAndHalfBedroom') threeAndHalfBedroom: string,

  ) {
    const skip = parseInt(page, 10) ? (parseInt(page, 10) - 1) * parseInt(perPage || '24', 10) : 0;
    const take = parseInt(perPage, 10) || 24;
    const developerName = developer ? developer.split(',') : [];
    const priorityValues = priority ? priority.split(',') : [];
    const statusValues = status ? status.split(',') : [];
    const regionsValues = regions ? regions.split(',') : [];
    const areaValues = units_types ? units_types.split(',') : [];
    const whereClause = {
      Project_name: { contains: search },
      Developers_name: developerName.length ? { in: developerName } : undefined,
      Region: regionsValues.length ? { in: regionsValues } : undefined,
      Units_types: areaValues.length ? { in: areaValues } : undefined,
      Area_name: { contains: name },
      Status: statusValues.length ? { in: statusValues } : undefined,
      Priority: priorityValues.length ? { in: priorityValues } : undefined,
      Furnishing: { contains: furnishing },
      Price_from_AED: { contains: minrangePrice },
      Price_to_AED: { contains: maxrangePrice },
      Year:  year ,  
      Quarter: quarter,
      Month: month,
      Display_all: dispall,
      TwoBedroom: twoBedroom,
      SixBedroom: sixBedroom,
      OneBedroomPool: oneBedroomPool,
      OneBedroom: oneBedroom,
      FourBedroom: fourBedroom,
      ThreeBedroom: threeBedroom,
      MergedStudios: mergedStudios,
      TwoBedroomPool: twoBedroomPool,
      EightBedroom: eightBedroom,
      NineBedroom: nineBedroom,
      SevenBedroom: sevenBedroom,
      StudioPool: studioPool,
      FiveBedroom: fiveBedroom,
      ThreeBedroomPool: threeBedroomPool,
      TwoAndHalfBedroom: twoAndHalfBedroom,
      Studio: studio,
      OneAndHalfBedroom: oneAndHalfBedroom,
      ThreeAndHalfBedroom: threeAndHalfBedroom


    };



    const projects = await this.prisma.projects.findMany({
      where: whereClause,
      skip,
      take,
    });

    // Get total count of projects matching the search criteria
    const totalCount = await this.prisma.projects.count({
      where: whereClause,
    });

    return { projects, totalCount };
  }
}




// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
}

model Projects {
  id                 String   @id
  Completion_date    String?
  Coordinates        String?
  Project_name       String?
  Developers_name    String?
  Area_name          String?
  Region             String?
  Publish            String?
  Status             String?
  Priority           String?
  Floors             String?
  Furnishing         String?
  Price_from_AED     String?    
  Price_to_AED       String?   
  Cover_URL          String?  
  Year               String?    
  Quarter            String?  
  Month              String? 
  Units_types        String?
  Data_All           String?   
  TwoBedroom         String?  
  Studio             String?  
  SixBedroom         String?  
  OneBedroomPool     String?  
  OneBedroom         String?  
  FourBedroom        String?  
  ThreeBedroom       String?  
  MergedStudios      String?  
  TwoBedroomPool     String?  
  EightBedroom       String?  
  NineBedroom        String?  
  SevenBedroom       String?  
  TwoBedroomPlusPool String?  
  StudioPool         String?  
  FiveBedroom        String?  
  ThreeBedroomPool   String?  
  TwoAndHalfBedroom  String?  
  OneAndHalfBedroom  String?  
  ThreeAndHalfBedroom String?  
}